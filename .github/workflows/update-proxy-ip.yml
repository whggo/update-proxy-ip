name: Update Proxy IP and Cloudflare DNS

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  update-proxy-and-dns:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Download and save proxy IP list
      run: |
        echo "正在下载代理IP列表..."
        curl -s -o proxyip.txt https://raw.githubusercontent.com/leung7963/CF-PROXYIP/main/proxyip.txt
        
        # 检查文件是否下载成功
        if [ ! -s proxyip.txt ]; then
          echo "错误: 下载的proxyip.txt文件为空或不存在"
          exit 1
        fi
        
        echo "下载完成，文件内容:"
        cat proxyip.txt
        echo -e "\n文件行数: $(wc -l < proxyip.txt)"

    - name: Update Cloudflare DNS with first IP
      run: |
        cat > update_dns.py << 'EOF'
        import requests
        import os
        import re
        
        # 配置信息
        CF_API_TOKEN = os.getenv('CF_API_TOKEN')
        ZONE_ID = os.getenv('CF_ZONE_ID')
        DNS_RECORD_ID = os.getenv('CF_DNS_RECORD_ID')
        DOMAIN_NAME = os.getenv('CF_DOMAIN_NAME')
        
        def read_first_ip_from_file():
            """从proxyip.txt文件中读取第一个IP地址"""
            try:
                with open('proxyip.txt', 'r') as file:
                    lines = file.readlines()
                    
                # 过滤空行和注释行，提取有效IP
                valid_ips = []
                for line in lines:
                    line = line.strip()
                    if line and not line.startswith('#') and not line.startswith('//'):
                        # 使用正则表达式匹配IP地址
                        ip_match = re.search(r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b', line)
                        if ip_match:
                            valid_ips.append(ip_match.group(0))
                
                if not valid_ips:
                    print("错误: 在proxyip.txt中未找到有效的IP地址")
                    return None
                
                first_ip = valid_ips[0]
                print(f"从文件中提取的第一个有效IP: {first_ip}")
                return first_ip
                
            except Exception as e:
                print(f"读取文件时出错: {e}")
                return None
        
        def get_current_dns_record():
            """获取当前的DNS记录"""
            url = f"https://api.cloudflare.com/client/v4/zones/{ZONE_ID}/dns_records/{DNS_RECORD_ID}"
            headers = {
                "Authorization": f"Bearer {CF_API_TOKEN}",
                "Content-Type": "application/json"
            }
            
            try:
                response = requests.get(url, headers=headers, timeout=15)
                response.raise_for_status()
                result = response.json()
                
                if result.get('success'):
                    return result['result']
                else:
                    print(f"获取DNS记录失败: {result.get('errors', '未知错误')}")
                    return None
                    
            except Exception as e:
                print(f"获取DNS记录时出错: {e}")
                return None
        
        def update_dns_record(new_ip):
            """更新DNS记录到新的IP"""
            url = f"https://api.cloudflare.com/client/v4/zones/{ZONE_ID}/dns_records/{DNS_RECORD_ID}"
            headers = {
                "Authorization": f"Bearer {CF_API_TOKEN}",
                "Content-Type": "application/json"
            }
            
            data = {
                "type": "A",
                "name": DOMAIN_NAME,
                "content": new_ip,
                "ttl": 1,  # 自动TTL
                "proxied": False  # 不经过Cloudflare代理
            }
            
            try:
                response = requests.put(url, headers=headers, json=data, timeout=15)
                response.raise_for_status()
                result = response.json()
                
                if result.get('success'):
                    print(f"DNS记录更新成功: {DOMAIN_NAME} -> {new_ip}")
                    return True
                else:
                    errors = result.get('errors', [])
                    error_msg = ', '.join([str(error) for error in errors])
                    print(f"DNS记录更新失败: {error_msg}")
                    return False
                    
            except Exception as e:
                print(f"更新DNS记录时出错: {e}")
                return False
        
        def main():
            # 从文件中读取第一个IP
            new_ip = read_first_ip_from_file()
            if not new_ip:
                return False
            
            # 验证IP地址格式
            ip_pattern = r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$'
            if not re.match(ip_pattern, new_ip):
                print(f"错误: {new_ip} 不是有效的IP地址格式")
                return False
            
            # 获取当前DNS记录
            current_record = get_current_dns_record()
            if current_record:
                current_ip = current_record['content']
                print(f"当前DNS记录IP: {current_ip}")
                
                # 如果IP相同，不需要更新
                if current_ip == new_ip:
                    print("IP地址未变化，无需更新DNS记录")
                    return True
            
            # 更新DNS记录
            success = update_dns_record(new_ip)
            if success:
                print("Cloudflare DNS更新完成")
            else:
                print("Cloudflare DNS更新失败")
            
            return success
        
        if __name__ == "__main__":
            main()
        EOF
        
        python update_dns.py
      env:
        CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
        CF_DNS_RECORD_ID: ${{ secrets.CF_DNS_RECORD_ID }}
        CF_DOMAIN_NAME: ${{ secrets.CF_DOMAIN_NAME }}

    - name: Commit changes if any
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # 检查是否有文件变化
        if git diff --quiet; then
          echo "没有文件变化，无需提交"
        else
          echo "检测到文件变化，提交更改"
          git add proxyip.txt
          git commit -m "自动更新: 同步代理IP列表 [skip ci]"
          git push
        fi

    - name: Show final status
      run: |
        echo "工作流执行完成"
        echo "当前proxyip.txt内容:"
        cat proxyip.txt
